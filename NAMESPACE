useDynLib(jl4R, .registration = TRUE)

# exportPattern("^\\jl_")
# exportPattern("^\\jlR_")
export(
  jl, jlR,
  jlvalue_eval,
  as_jlvalue, is.jlvalue,
  R, toR,
  jlrun, jlcall,
  jlset, jlget,
  jlshow, jldisplay,
  jlusing, jlpkg,
  is.Struct,
  jl2R, jl2R_unsafe,
  jltypeof, jlstring,
  jlRcall,
  jlRtypeof, jlRstring,
  jlArray, jlCategoricalArray, jlDataFrame,
  jlDict, jlTuple, jlNamedTuple, jlStruct,
  jlcolon, jlsymbol
)

S3method(print,jlvalue)

#S3methods are not viewable inside the R system. If you want this functionality available put it in the previous export
S3method("as_jlvalue",default)
S3method("as_jlvalue",jlvalue)
S3method("as_jlvalue",data.frame)
S3method("as_jlvalue",list)
S3method("as_jlvalue",integer)
S3method("as_jlvalue",double)
S3method("as_jlvalue",logical)
S3method("as_jlvalue",character)
S3method("as_jlvalue",factor)

S3method(toR,default)
S3method(toR,jlvalue)
S3method(toR,DataFrame)
S3method(toR,CategoricalArray)
S3method(toR,NamedTuple)
S3method(toR,Tuple)

S3method("names",jlEnv)
S3method("[",jlEnv)
S3method("[[",jlEnv)
S3method("$",jlEnv)
S3method("$<-",jlEnv)
S3method("print",jlEnv)
S3method("@",jlEnv)

S3method("names",Struct)
S3method("[",Struct)
S3method("$",Struct)

S3method("names",NamedTuple)
S3method("[",NamedTuple)
S3method("$",NamedTuple)

S3method("length",Tuple)
S3method("[",Tuple)

S3method("names",Dict)
S3method("[",Dict)
S3method("$",Dict)

S3method("length", Array)
S3method("[", Array)

S3method("names", DataFrame)
S3method("[", DataFrame)
S3method("$", DataFrame)

S3method("levels", CategoricalArray)


# S3method(print,jlvector)
# S3method("[<-",jlvector)
# S3method("[[",jlvector)
# S3method("[[<-",jlvector)
# S3method(as.vector,jlvector)
